// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  xpTotal   Int      @default(0)

  progress UserProgress[]
  answers  UserAnswer[]
  gameRuns UserGameRun[]
}

model Lesson {
  id           String         @id @default(cuid())
  unit         String
  title        String
  summaryMdx   String
  videoUrl     String?
  order        Int
  questions    Question[]
  UserProgress UserProgress[]
}

model Question {
  id             String       @id @default(cuid())
  lessonId       String
  lesson         Lesson       @relation(fields: [lessonId], references: [id])
  type           String // e.g. "mcq"
  stemMdx        String
  difficulty     Int          @default(1)
  explanationMdx String
  choices        Choice[]
  UserAnswer     UserAnswer[]
}

model Choice {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  textMdx    String
  isCorrect  Boolean  @default(false)
}

model UserProgress {
  userId    String
  lessonId  String
  status    String   @default("in_progress")
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@id([userId, lessonId])
}

model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  choiceId   String
  correct    Boolean
  answeredAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
}

model Game {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String
  skills      String[]
  UserGameRun UserGameRun[]
}

model UserGameRun {
  id         String    @id @default(cuid())
  userId     String
  gameId     String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  score      Int       @default(0)
  xpAwarded  Int       @default(0)

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])
}

model GameScore {
  id        String   @id @default(cuid())
  game      String // e.g. "prompt-builder"
  name      String? // player name/initials (optional)
  score     Int // higher is better
  timeMs    Int? // for time-based games
  createdAt DateTime @default(now())

  @@index([game, score])
}
